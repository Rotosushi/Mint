// Copyright (C) 2023 Cade Weinberg
// 
// This file is part of Mint.
// 
// Mint is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Mint is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Mint.  If not, see <http://www.gnu.org/licenses/>.

functions interact with all of the peices of the language currently implemented.

they introduce new keywords and parsers.

they are definitions, meaning they interact with use-before-def,
in addition the current use-before-def solution does not solve mutual dependence 
between two definitions. (mostly because only functions have this issue)

they are anonymous local scopes meaning they interact with lookup, 
and other definitions can potentially occur within them.

they are runtime evaluation contexts, (a first for the language so far) 
meaning they interact with both the comptime/runtime dichotomy and provide 
a directed graph of basic blocks to place llvm ir instructions. meaning 
they are going to effect the code generation of both definitions (let) 
and variables (need to contend with global/local).
and, once we have functions, they serve as the entry point to the 
program itself, meaning they allow the program to generate executables.
instead of just llvm-ir.

they come in two parts: function definitions, and call expressions. 
further, it might be a good idea to add a third component. Blocks.
which form both the function body. and anonymous local scopes themselves.

okay, so I've decided to implement captureless lambdas first, these are 
function objects, which can be represented by a function pointer. These 
have more functionality than a top level function, and so are more useful 
a feature to have early.

so, lambdas are represented in IR as a formal argument list, an optional 
return type annotation, and their body.
since lambdas are values, they can be stored within the synbol table.
this means they need to be able to be applied from any other MIR,
which means they cannot be defined relative to the MIR in which they 
are defined. really this means that the body must be a MIR itself.
now, a problem that arises as a result of this choice is contingent 
on how we parse lambdas themselves. 
since they are values we want them to sit in the grammar along with 
all of the other literals. this means that in a composite expression 
such as 

let f = \=> 1; 

the body of the lambda is terminated by the ';' yes, but that terminator is 
consumed by the let expression, this means that only a single expression can 
comprise the body of a lambda, per the rules of the grammar. we need a composite 
statement in order to parse mutliple expressions as part of the body.

a more parsable syntax is 

let f = \{1;};

but this is annoying due to the (seemingly) redundant ';' within the '{}'

we want to write 

let f = \{1};

or be able to write 

let f = \{let a = ...; g(a); ...}

this can be done if we allow for an optional ';'