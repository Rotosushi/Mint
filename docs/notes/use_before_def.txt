// Copyright (C) 2023 Cade Weinberg
// 
// This file is part of Mint.
// 
// Mint is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Mint is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Mint.  If not, see <http://www.gnu.org/licenses/>.

the main question is how do we interpret/compile definitions which 
rely upon names which are defined after they are used?

we can already typecheck this:

1  let x = 10;
2  let y = x;

this is because we can fully typecheck and evaluate 1.
then 2 relies on 1 and can also be typechecked and evalauted.

so how do we typecheck the reverse:

1  let y = x;
2  let x = 10;

we will fail to type 1 with a use-before-def error. 
This error will hold the definition name reliant upon 
the undef name, as well as the undef name.
we store the definition itself (the ast) into a map with the undef name as 
the key.

then we encounter 2, fully typecheck and evaluate it, then since we 
just created a new definition we try and resolve any use-before-def 
definitions held within the map under the newly defined name.


